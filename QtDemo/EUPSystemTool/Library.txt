动态库和静态库
1、静态库
	概念：可重定位目标文件以一种特定的方式打包成一个单独的文件，并且在链接生成可执行文件时，从这个单独的文件中“拷贝它自己需要的内容到最终的可执行文件中。这个单独的文件，称为静态库。Linux中通常以.a(archive)为后缀。

2、动态库
	概念：动态库和静态库类似，但是它并不在链接时将需要的二进制代码都“拷贝”到可执行文件中，而是仅仅“拷贝”一些重定位和符号表信息，这些信息可以在程序运行时完成真正的链接过程。 Linux中通常以.so（shared object）作为后缀。

3、区别
	①可执行文件大小不一样
		静态链接的可执行文件要比动态链接的可执行文件要大得多，因为它将需要用到的代码从二进制文件中“拷
		贝”了一份，而动态库仅仅是复制了一些重定位和符号表信息。
	②占用磁盘大小不一样
		如果有多个可执行文件，那么静态库中的同一个函数的代码就会被复制多份，而动态库只有一份，因此使用
		静态库占用的磁盘空间相对比动态库要大。
	③扩展性与兼容性不一样
		如果静态库中某个函数的实现变了，那么可执行文件必须重新编译，而对于动态链接生成的可执行文件，只
		需要更新动态库本身即可，不需要重新编译可执行文件。
	④依赖不一样
		静态链接的可执行文件不需要依赖其他的内容即可运行，而动态链接的可执行文件必须依赖动态库的存在。
	⑤复杂性不一样
		相对来讲，动态库的处理要比静态库要复杂，例如，如何在运行时确定地址？多个进程如何共享一个动态库？
	⑥加载速度不一样
		由于静态库在链接时就和可执行文件在一块了，而动态库在加载或者运行时才链接，因此，对于同样的程序，
		静态链接的要比动态链接加载更快。所以选择静态库还是动态库是空间和时间的考量。

4、命名方式
- 以"libname.so.x.y.z"来说：

- - 最前面使用"lib"前缀，中间是库的名字和后缀".so"，后面跟着三个数字组成版本号
  - - x为主版本号，表示库的重大升级
    - - 不同主版本号的库之间是不兼容的
      - - 依赖于旧版本号的程序要修改相应的代码来适应新版本的库，并重新编译才可以链接新版本库运行

    - y为次版本号，表示库的增量升级
    - - 相对于旧版本只是增加了一些新的接口
      - - 并保持原有的接口符号不变，完全兼容旧版本的库
      - 即一个依赖于旧版本号的程序可以直接链接新版本库来正常运行

    - z为发布版本号
    - - 表示库的一些错误修正、性能优化等
      - - 不会增加新的接口，只是在旧版本库的基础上做一些优化

5、注意事项
①命名规范
Ⅰ、对动态库的命名需要符合第四点命名方式的规范。
Ⅱ、每一个动态库都必须要有一个soname，且soname名只留主版本号即"libname.so.x”。
Ⅲ、不要重复命名

②同步命令sync
在进行拷贝或移动动态库操作，或是移动其他文件（包括拔插USB设备）后，在命令行运行sync命令，
刷新缓冲区，避免拷贝或移动的文件损坏。（用md5值校验）
